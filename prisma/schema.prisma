generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Profile {
  id        String   @id @default(cuid())
  userId    String   @unique
  avatarUrl String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  active    Boolean  @default(true)
  firstName String?  @map("first_name")
  lastName  String?  @map("last_name")
  role      UserRole @default(USER)

  @@index([userId])
  @@map("profiles")
}

model DashboardSection {
  id           String   @id @default(uuid())
  key          String   @unique
  name         String
  description  String?
  icon         String?
  url          String
  parentKey    String?
  displayOrder Int      @default(0)
  isActive     Boolean  @default(true) @map("is_active")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@index([key])
  @@index([parentKey])
  @@index([isActive])
  @@index([displayOrder])
  @@map("dashboard_sections")
}

model Role {
  id          String   @id @default(uuid())
  name        String   @unique
  permissions Json
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  users       User[]

  @@index([isActive])
  @@map("roles")
}

model BusinessType {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  name      String    @unique
  isActive  Boolean   @default(true) @map("is_active")
  products  Product[]

  @@index([name])
  @@index([isActive])
  @@map("business_types")
}

model Brand {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  name      String    @unique
  isActive  Boolean   @default(true) @map("is_active")
  models    Model[]
  products  Product[]

  @@index([name])
  @@index([isActive])
  @@map("brands")
}

model Model {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  name      String
  isActive  Boolean   @default(true) @map("is_active")
  brandId   String    @map("brand_id")
  brand     Brand     @relation(fields: [brandId], references: [id])
  products  Product[]

  @@unique([name, brandId])
  @@index([name])
  @@index([brandId])
  @@index([isActive])
  @@map("models")
}

model Lead {
  id               String             @id @default(uuid())
  createdAt        DateTime           @default(now()) @map("created_at")
  updatedAt        DateTime           @updatedAt @map("updated_at")
  firstName        String             @map("first_name")
  lastName         String             @map("last_name")
  email            String?            @unique
  phone            String?
  qualityScore     Int?               @map("quality_score")
  statusId         String             @map("status_id")
  sourceId         String             @map("source_id")
  assignedToId     String             @map("assigned_to_id")
  lastContactedAt  DateTime?          @map("last_contacted_at")
  nextFollowUpDate DateTime?          @map("next_follow_up_date")
  convertedAt      DateTime?          @map("converted_at")
  isArchived       Boolean            @default(false) @map("is_archived")
  isClosed         Boolean            @default(false) @map("is_closed")
  closedAt         DateTime?          @map("closed_at")
  reasonClosed     String?            @map("reason_closed")
  cellphone        String?
  productId        String?            @map("product_id")
  extraComments    String?            @map("extra_comments")
  qualification    LeadQualification  @default(NOT_QUALIFIED) @map("qualification")
  isFavorite       Boolean            @default(false) @map("is_favorite")
  favoriteAt       DateTime?          @map("favorite_at")
  documents        Document[]
  assignedTo       User               @relation(fields: [assignedToId], references: [id])
  product          Product?           @relation(fields: [productId], references: [id])
  source           LeadSource         @relation(fields: [sourceId], references: [id])
  status           LeadStatus         @relation(fields: [statusId], references: [id])
  quotations       Quotation[]
  reservations     Reservation[]
  sales            Sale[]
  tasks            Task[]
  reassignments    LeadReassignment[] @relation("reassignedLead")

  @@index([statusId])
  @@index([sourceId])
  @@index([assignedToId])
  @@index([productId])
  @@index([createdAt])
  @@index([qualityScore])
  @@index([isArchived])
  @@index([isClosed])
  @@index([isFavorite])
  @@index([favoriteAt])
  @@index([nextFollowUpDate])
  @@map("leads")
}

model LeadStatus {
  id             String   @id @default(uuid())
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")
  name           String   @unique
  description    String?
  color          String
  displayOrder   Int      @map("display_order")
  conversionRate Float?   @map("conversion_rate")
  isActive       Boolean  @default(true) @map("is_active")
  leads          Lead[]

  @@index([displayOrder])
  @@index([isActive])
  @@map("lead_statuses")
}

model SourceCategory {
  id          String       @id @default(uuid())
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  name        String       @unique
  description String?
  color       String?
  isActive    Boolean      @default(true) @map("is_active")
  sources     LeadSource[]

  @@index([isActive])
  @@map("source_categories")
}

model LeadSource {
  id            String          @id @default(uuid())
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime        @updatedAt @map("updated_at")
  name          String          @unique
  description   String?
  categoryId    String?         @map("category_id")
  costPerSource Decimal?        @map("cost_per_source") @db.Decimal(10, 2)
  isActive      Boolean         @default(true) @map("is_active")
  category      SourceCategory? @relation(fields: [categoryId], references: [id])
  leads         Lead[]

  @@index([categoryId])
  @@index([isActive])
  @@map("lead_sources")
}

model Country {
  id        String    @id @default(uuid())
  name      String    @unique
  code      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  users     User[]
  Product   Product[]

  @@map("countries")
}

model User {
  id             String             @id @default(uuid())
  createdAt      DateTime           @default(now()) @map("created_at")
  updatedAt      DateTime           @updatedAt @map("updated_at")
  email          String             @unique
  name           String
  role           String
  isActive       Boolean            @default(true) @map("is_active")
  isDeleted      Boolean            @default(false) @map("is_deleted")
  deletedAt      DateTime?          @map("deleted_at")
  deletedBy      String?            @map("deleted_by")
  conversionRate Float?             @map("conversion_rate")
  responseTime   Int?               @map("response_time")
  roleId         String?            @map("role_id")
  countryId      String?            @map("country_id")
  assignedLeads  Lead[]
  tasks          Task[]
  userRole       Role?              @relation(fields: [roleId], references: [id])
  country        Country?           @relation(fields: [countryId], references: [id])
  userPermission UserPermission?
  reassignedFrom LeadReassignment[] @relation("reassignedFrom")
  reassignedTo   LeadReassignment[] @relation("reassignedTo")
  reassignedBy   LeadReassignment[] @relation("reassignedBy")

  @@index([email])
  @@index([role])
  @@index([isActive])
  @@index([isDeleted])
  @@index([roleId])
  @@index([countryId])
  @@map("users")
}

model Task {
  id           String     @id @default(uuid())
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")
  title        String
  status       TaskStatus @default(PENDING)
  leadId       String     @map("lead_id")
  assignedToId String     @map("assigned_to_id")
  completedAt  DateTime?  @map("completed_at")
  description  String?    @map("description")
  scheduledFor DateTime?  @map("scheduled_for")
  assignedTo   User       @relation(fields: [assignedToId], references: [id])
  lead         Lead       @relation(fields: [leadId], references: [id], onDelete: Cascade)

  @@index([leadId])
  @@index([assignedToId])
  @@index([status])
  @@map("tasks")
}

model Document {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  name      String
  type      String
  size      Int
  url       String
  leadId    String   @map("lead_id")
  lead      Lead     @relation(fields: [leadId], references: [id], onDelete: Cascade)

  @@index([leadId])
  @@index([type])
  @@map("documents")
}

model ActivityLog {
  id            String   @id @default(uuid())
  createdAt     DateTime @default(now()) @map("created_at")
  entityType    String   @map("entity_type")
  entityId      String   @map("entity_id")
  action        String
  description   String
  changes       Json?
  performedById String   @map("performed_by_id")

  @@index([entityType, entityId])
  @@index([performedById])
  @@index([createdAt])
  @@map("activity_logs")
}

model Product {
  id                  String             @id @default(uuid())
  createdAt           DateTime           @default(now()) @map("created_at")
  updatedAt           DateTime           @updatedAt @map("updated_at")
  name                String             @unique
  price               Decimal?           @db.Decimal(10, 2)
  isActive            Boolean            @default(true) @map("is_active")
  brandId             String?            @map("brand_id")
  businessTypeId      String?            @map("business_type_id")
  code                String             @unique
  descriptionProduct  String?
  modelId             String?            @map("model_id")
  nameProduct         String
  countryId           String?            @map("country_id")
  currency            Currency           @default(BOB)
  specifications      Json?              @map("specifications")
  savingsPlan         Json?              @map("savings_plan")
  commercialCondition String?            @map("commercial_condition")
  validUntil          String?            @map("valid_until")
  sellerDiscount      Decimal?           @map("seller_discount") @db.Decimal(5, 2)
  managerDiscount     Decimal?           @map("manager_discount") @db.Decimal(5, 2)
  leads               Lead[]
  images              ProductImage[]
  brand               Brand?             @relation(fields: [brandId], references: [id])
  businessType        BusinessType?      @relation(fields: [businessTypeId], references: [id])
  model               Model?             @relation(fields: [modelId], references: [id])
  country             Country?           @relation(fields: [countryId], references: [id])
  QuotationProduct    QuotationProduct[]

  @@index([code])
  @@index([name])
  @@index([businessTypeId])
  @@index([brandId])
  @@index([modelId])
  @@index([countryId])
  @@index([isActive])
  @@map("products")
}

model ProductImage {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  url       String
  isMain    Boolean  @default(false) @map("is_main")
  productId String   @map("product_id")
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([isMain])
  @@map("product_images")
}

model Quotation {
  id                String             @id @default(uuid())
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @updatedAt @map("updated_at")
  leadId            String             @map("lead_id")
  totalAmount       Decimal            @map("total_amount") @db.Decimal(10, 2)
  proformaUrl       String?            @map("proforma_url")
  additionalNotes   String?            @map("additional_notes")
  status            SalesProcessStatus @default(DRAFT)
  quotationProducts QuotationProduct[]
  lead              Lead               @relation(fields: [leadId], references: [id])
  reservations      Reservation[]
  currency          Currency           @default(BOB)

  @@index([leadId])
  @@index([status])
  @@index([createdAt])
  @@map("quotations")
}

model Reservation {
  id                     String             @id @default(uuid())
  createdAt              DateTime           @default(now()) @map("created_at")
  updatedAt              DateTime           @updatedAt @map("updated_at")
  leadId                 String             @map("lead_id")
  quotationId            String?            @map("quotation_id")
  amount                 Decimal            @db.Decimal(10, 2)
  paymentMethod          PaymentMethod      @map("payment_method")
  deliveryDate           DateTime           @map("delivery_date")
  reservationFormUrl     String?            @map("reservation_form_url")
  depositReceiptUrl      String?            @map("deposit_receipt_url")
  reservationContractUrl String?            @map("reservation_contract_url")
  vehicleDetails         String?            @map("vehicle_details")
  additionalNotes        String?            @map("additional_notes")
  status                 SalesProcessStatus @default(DRAFT)
  lead                   Lead               @relation(fields: [leadId], references: [id])
  quotation              Quotation?         @relation(fields: [quotationId], references: [id])
  sales                  Sale[]
  currency               Currency           @default(BOB)

  @@index([leadId])
  @@index([quotationId])
  @@index([status])
  @@index([createdAt])
  @@map("reservations")
}

model Sale {
  id                String         @id @default(uuid())
  createdAt         DateTime       @default(now()) @map("created_at")
  updatedAt         DateTime       @updatedAt @map("updated_at")
  leadId            String         @map("lead_id")
  reservationId     String?        @map("reservation_id")
  amount            Decimal        @db.Decimal(10, 2)
  paymentMethod     PaymentMethod  @map("payment_method")
  saleContractUrl   String?        @map("sale_contract_url")
  invoiceUrl        String?        @map("invoice_url")
  paymentReceiptUrl String?        @map("payment_receipt_url")
  additionalNotes   String?        @map("additional_notes")
  saleStatus        SaleStatus     @default(IN_PRODUCTION) @map("sale_status")
  approvalStatus    ApprovalStatus @default(PENDING) @map("approval_status")
  rejectionReason   String?        @map("rejection_reason")
  approvedBy        String?        @map("approved_by")
  approvedAt        DateTime?      @map("approved_at")
  rejectedBy        String?        @map("rejected_by")
  rejectedAt        DateTime?      @map("rejected_at")
  lead              Lead           @relation(fields: [leadId], references: [id])
  reservation       Reservation?   @relation(fields: [reservationId], references: [id])
  currency          Currency       @default(BOB)

  @@index([leadId])
  @@index([reservationId])
  @@index([approvalStatus])
  @@index([saleStatus])
  @@index([createdAt])
  @@map("sales")
}

model QuotationProduct {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  quotationId String    @map("quotation_id")
  productId   String    @map("product_id")
  quantity    Int
  price       Decimal   @db.Decimal(10, 2)
  product     Product   @relation(fields: [productId], references: [id])
  quotation   Quotation @relation(fields: [quotationId], references: [id], onDelete: Cascade)

  @@index([quotationId])
  @@index([productId])
  @@map("quotation_products")
}

model UserPermission {
  id          String   @id @default(uuid())
  userId      String   @unique
  permissions Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_permissions")
}

model LeadReassignment {
  id           String   @id @default(uuid())
  createdAt    DateTime @default(now()) @map("created_at")
  leadId       String   @map("lead_id")
  fromUserId   String   @map("from_user_id")
  toUserId     String   @map("to_user_id")
  reassignedBy String   @map("reassigned_by")
  reason       String?

  lead             Lead @relation("reassignedLead", fields: [leadId], references: [id], onDelete: Cascade)
  fromUser         User @relation("reassignedFrom", fields: [fromUserId], references: [id], onDelete: Restrict)
  toUser           User @relation("reassignedTo", fields: [toUserId], references: [id], onDelete: Restrict)
  reassignedByUser User @relation("reassignedBy", fields: [reassignedBy], references: [id], onDelete: Restrict)

  @@index([leadId])
  @@index([fromUserId])
  @@index([toUserId])
  @@index([reassignedBy])
  @@index([createdAt])
  @@map("lead_reassignments")
}

enum UserRole {
  USER
  SUPERADMIN
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum SalesProcessStatus {
  DRAFT
  COMPLETED
  CANCELLED
}

enum LeadQualification {
  NOT_QUALIFIED
  GOOD_LEAD
  BAD_LEAD
}

enum PaymentMethod {
  CASH
  CARD
  TRANSFER
  CHECK
  FINANCING
}

enum Currency {
  BOB
  USD
  USDT
}

enum SaleStatus {
  IN_PRODUCTION
  IN_STORE
  INVOICED
  REFUND_REQUEST
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}
