---
description: 
globs: 
alwaysApply: true
---
---
description: Consolidate duplicate permission files by migrating logic from `src/lib/permissions.ts` to `src/lib/utils/permissions.ts`
globs:
  - src/lib/permissions.ts
  - src/lib/utils/permissions.ts
  - src/**/*.ts
alwaysApply: false
---

# Objective

Eliminate redundancy by consolidating permission logic into a single, authoritative file: `src/lib/utils/permissions.ts`. Ensure all modules reference this file, and remove `src/lib/permissions.ts` after successful migration.

# Tasks

1. **Identify Dependencies**

   - Search the codebase for imports from `src/lib/permissions.ts`.
   - List all files and modules that depend on this file.

2. **Migrate Functions**

   - Compare functions in both `permissions.ts` and `utils/permissions.ts`.
   - For any unique or more complete functions in `permissions.ts`, transfer them to `utils/permissions.ts`.
   - Ensure that transferred functions are integrated without disrupting existing logic.

3. **Update Imports**

   - In all files previously importing from `permissions.ts`, update the import path to `utils/permissions.ts`.
   - Verify that the imported functions are correctly referenced and utilized.

4. **Test Functionality**

   - Run existing tests to ensure that permission-related functionalities remain intact.
   - If tests are absent, consider writing basic tests to validate critical permission checks.

5. **Remove Redundant File**
   - Once all dependencies have been updated and tested, delete `src/lib/permissions.ts`.
   - Confirm that the project builds successfully and no references to the deleted file remain.

# Verification

- [ ] All permission-related functions are centralized in `utils/permissions.ts`.
- [ ] No imports from `src/lib/permissions.ts` exist in the codebase.
- [ ] The application builds without errors.
- [ ] Permission functionalities operate as expected.

# Notes

- Maintain clear documentation within `utils/permissions.ts` for each function, especially those migrated from `permissions.ts`.
- Consider adding comments indicating the origin of migrated functions for future reference.
- Engage in code reviews to ensure that the consolidation maintains code quality and clarity.

```
:contentReference[oaicite:4]{index=4}

:contentReference[oaicite:6]{index=6}:contentReference[oaicite:8]{index=8}
::contentReference[oaicite:9]{index=9}

```

